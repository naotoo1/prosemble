name: Test Multiple Python Versions

on:
  push:
    branches: [ main ]
    paths:
      - 'devenv.nix'
      - 'devenv.lock'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-python-versions:
    name: Test Python ${{ matrix.python_version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ['311', '312', '313']
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Install Nix using the dedicated GitHub Action
      - name: Install Nix
        uses: cachix/install-nix-action@v22
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
      
      # Install devenv manually with Nix
      - name: Install devenv
        run: |
          # Install devenv using nix command
          nix profile install --accept-flake-config "github:cachix/devenv/latest"
          # Check version
          devenv --version
      
      # Update Python version in devenv.nix
      - name: Update Python version in devenv.nix
        run: |
          echo "Updating devenv.nix with Python ${{ matrix.python_version }}"
          # Create a backup of the original file
          cp devenv.nix devenv.nix.backup
          
          # Use sed to replace all instances of pythonXXX references
          sed -i "s/python3[0-9][0-9]/python${{ matrix.python_version }}/g" devenv.nix
          
          # Show diff of changes
          diff devenv.nix.backup devenv.nix || true
          
          echo "Updated devenv.nix:"
          cat devenv.nix
      
      # Generate new devenv.lock file
      - name: Generate new devenv.lock file
        run: |
          # Generate the lock file
          devenv update
          
          echo "Generated new devenv.lock with Python ${{ matrix.python_version }}:"
          cat devenv.lock
      
      - name: Run tests with devenv
        run: |
          # Run tests with the Python version from devenv
          echo "=== Testing Python version ==="
          devenv shell -- python --version
          
          # Check if uv is available
          echo "=== Checking uv installation ==="
          devenv shell -- uv --version || echo "uv not installed"
          
          # Install package with uv
          echo "=== Installing package with uv ==="
          devenv shell -- uv pip install .[all] || devenv shell -- pip install .[all]
          
          # Run unittest tests
          echo "=== Running unittest tests ==="
          devenv shell -- python -m unittest discover tests/
          
          # Run pytest tests
          echo "=== Running pytest tests ==="
          devenv shell -- pytest tests/
          
          # List installed packages
          echo "=== Installed packages ==="
          devenv shell -- pip list
          
      # Save the working devenv files for this Python version
      - name: Save working devenv files
        if: success()
        run: |
          # Create directory if it doesn't exist
          mkdir -p ./python-versions
          
          # Save the working files with Python version in the name
          cp devenv.nix ./python-versions/devenv-py${{ matrix.python_version }}.nix
          cp devenv.lock ./python-versions/devenv-py${{ matrix.python_version }}.lock
      
      # Upload the Python version-specific files as artifacts
      - name: Upload devenv files
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: devenv-python-${{ matrix.python_version }}
          path: ./python-versions/
          retention-days: 7