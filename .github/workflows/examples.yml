name: examples
on:
  [workflow_dispatch]
  
jobs:
  linux:
    runs-on: ubuntu-latest
    container:
      image: notoo1/ubuntu-nix:24.04-8
      credentials:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Verify test script exists & set permissions
        run: |
          if [ -f tests/test_examples.sh ]; then
            chmod +x tests/test_examples.sh
          else
            echo "ERROR: tests/test_examples.sh not found!"
            exit 1
          fi

      - name: Restore Nix environment cache
        uses: actions/cache@v4
        id: nix-cache
        with:
          path: |
            ~/.nix-profile
            ~/.devenv
            .direnv
            .env_cache
          key: ${{ runner.os }}-nix-python312-${{ hashFiles('devenv.nix', 'devenv.lock', 'devenv.yaml', 'flake.nix', 'flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-nix-python312-

      - name: Ensure Nix and devenv are installed
        run: |
          if ! command -v nix &> /dev/null; then
            echo "ERROR: Nix is not installed!"
            exit 1
          fi

          if ! command -v devenv &> /dev/null; then
            echo "Installing devenv..."
            nix profile install --accept-flake-config "nixpkgs#devenv"
          fi

      - name: Setup devenv Environment
        run: |
          if [ -f .env_cache ] && [ -s .env_cache ] && [ "${{ steps.nix-cache.outputs.cache-hit }}" == "true" ]; then
            echo "Using cached environment"
            source .env_cache
          else
            echo "Setting up environment from scratch"

            # Initialize devenv
            devenv init || { echo "Failed to initialize devenv"; exit 1; }

            # Ensure we use the correct Python from devenv.nix
            direnv allow . && eval "$(direnv export bash)"

            # Verify Python version
            python --version || { echo "Python setup failed"; exit 1; }

            # Export important environment variables
            echo "PYTHONPATH=${PYTHONPATH}" >> .env_cache
            echo "PROJECT_DIR=${PROJECT_DIR}" >> .env_cache
            env >> .env_cache
          fi

      - name: Verify UV installation
        run: |
          if ! command -v uv &> /dev/null; then
            echo "ERROR: UV is not installed!"
            exit 1
          fi

      - name: Install dependencies
        run: |
          echo "Installing dependencies with UV..."
          uv pip install --no-cache-dir Cython
          uv pip install -e .[all]

      - name: Debug Environment Variables
        run: env | sort  # Helps diagnose missing env variables

      - name: Run Tests
        run: |
          ./tests/test_examples.sh examples/
