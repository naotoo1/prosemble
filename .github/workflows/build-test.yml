name: Update Devenv Python Versions and Run Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'devenv.nix'
      - 'devenv.lock'
      - 'Dockerfile'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version to use in devenv'
        required: true
        default: '312'
        type: choice
        options:
          - '310'
          - '311'
          - '312'
          - '313'

jobs:
  create-base-image:
    name: Create/Update Base Image
    runs-on: ubuntu-latest
    # Only run this job when the Dockerfile changes or when manually triggered
    if: ${{ github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.modified, 'Dockerfile') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push base Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/devenv-base:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-python-versions:
    name: Test Python ${{ matrix.python_version }}
    runs-on: ubuntu-latest
    needs: [create-base-image]
    if: always() # Run even if base image job is skipped
    strategy:
      matrix:
        python_version: ${{ github.event_name == 'workflow_dispatch' && fromJSON('["' + github.event.inputs.python_version + '"]') || ['310', '311', '312', '313'] }}
      fail-fast: false # Continue with other versions if one fails
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Install Nix using the dedicated GitHub Action
      - name: Install Nix
        uses: cachix/install-nix-action@v22
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
      
      # Install devenv
      - name: Install devenv
        run: |
          nix-env -iA nixpkgs.devenv
          echo "devenv version: $(devenv --version)"

      - name: Update devenv.nix with Python version
        run: |
          echo "Updating devenv.nix with Python ${{ matrix.python_version }}"
          # Create a backup of the original file
          cp devenv.nix devenv.nix.backup
          
          # Use sed to replace all instances of pythonXXX references
          sed -i "s/python3[0-9][0-9]/python${{ matrix.python_version }}/g" devenv.nix
          
          # Make sure uv is enabled in the languages.python section if not already
          if grep -q "languages = {" devenv.nix && grep -q "python = {" devenv.nix; then
            if ! grep -q "uv.enable = true" devenv.nix; then
              sed -i '/languages = {/,/python = {/ s/python = {/python = {\n      uv.enable = true;/' devenv.nix
            fi
          fi
          
          # Show diff of changes
          diff devenv.nix.backup devenv.nix || true
          echo "Updated devenv.nix:"
          cat devenv.nix

      - name: Generate new devenv.lock file
        run: |
          # Generate the lock file directly without Docker
          devenv lock
          echo "Generated new devenv.lock with Python ${{ matrix.python_version }}:"
          cat devenv.lock

      # Create a test folder to save this Python version's files
      - name: Save devenv files for this Python version
        run: |
          # Create test directory if it doesn't exist yet
          mkdir -p ./test/python-versions
          
          # Copy the files with Python version in filename
          cp devenv.nix ./test/python-versions/devenv-py${{ matrix.python_version }}.nix
          cp devenv.lock ./test/python-versions/devenv-py${{ matrix.python_version }}.lock

      - name: Run installation and tests
        run: |
          # Create test directory for artifacts
          mkdir -p ./test-results
          
          echo "Running tests with devenv"
          
          # Install direnv if needed
          nix-env -iA nixpkgs.direnv
          eval "$(direnv hook bash)"
          direnv allow
          
          # Run tests with the Python version from devenv
          echo "=== Testing Python version ==="
          devenv shell -- python --version > ./test-results/python-version.txt
          
          # Check if uv is available
          echo "=== Checking uv installation ==="
          devenv shell -- uv --version > ./test-results/uv-version.txt || echo "uv not installed" > ./test-results/uv-version.txt
          
          # Install package with uv
          echo "=== Installing package with uv ==="
          devenv shell -- uv pip install .[all] | tee ./test-results/install-log.txt || devenv shell -- pip install .[all] | tee ./test-results/install-log.txt
          
          # Run unittest tests
          echo "=== Running unittest tests ==="
          devenv shell -- python -m unittest discover tests/ | tee ./test-results/unittest-output.txt
          UNITTEST_EXIT_CODE=$?
          echo $UNITTEST_EXIT_CODE > ./test-results/unittest-exit-code.txt
          
          # Run pytest tests
          echo "=== Running pytest tests ==="
          devenv shell -- pytest tests/ | tee ./test-results/pytest-output.txt
          PYTEST_EXIT_CODE=$?
          echo $PYTEST_EXIT_CODE > ./test-results/pytest-exit-code.txt
          
          # Calculate overall test result
          if [ $UNITTEST_EXIT_CODE -eq 0 ] && [ $PYTEST_EXIT_CODE -eq 0 ]; then
            echo 0 > ./test-results/test-exit-code.txt
          else
            echo 1 > ./test-results/test-exit-code.txt
          fi
          
          # List installed packages
          devenv shell -- pip list > ./test-results/pip-packages.txt

      - name: Check test results
        run: |
          echo "Test Results for Python ${{ matrix.python_version }}:"
          echo "=== Python Version ==="
          cat ./test-results/python-version.txt || echo "Python version file not found"
          echo "=== UV Version ==="
          cat ./test-results/uv-version.txt || echo "UV version file not found"
          echo "=== Installation Log ==="
          cat ./test-results/install-log.txt || echo "Installation log not found"
          echo "=== Unittest Output ==="
          cat ./test-results/unittest-output.txt || echo "Unittest output not found"
          echo "=== Pytest Output ==="
          cat ./test-results/pytest-output.txt || echo "Pytest output not found"
          
          # Check if tests passed
          if [ -f "./test-results/test-exit-code.txt" ]; then
            TEST_EXIT_CODE=$(cat ./test-results/test-exit-code.txt)
            if [ "$TEST_EXIT_CODE" != "0" ]; then
              echo "::error::Tests failed with exit code $TEST_EXIT_CODE"
              exit 1
            fi
          else
            echo "::error::Test exit code file not found"
            exit 1
          fi
          
          # Verify Python version is correct
          if [ -f "./test-results/python-version.txt" ]; then
            if ! grep -q "Python 3.${{ matrix.python_version | replace: '3', '' }}" ./test-results/python-version.txt; then
              echo "::error::Python version verification failed"
              exit 1
            fi
          else
            echo "::error::Python version file not found"
            exit 1
          fi
          
          # Save test results to the test folder
          mkdir -p ./test/python-versions/py${{ matrix.python_version }}-results
          cp -r ./test-results/* ./test/python-versions/py${{ matrix.python_version }}-results/

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results-python-${{ matrix.python_version }}
          path: ./test-results
          retention-days: 7
          
      # Upload the test folder with devenv files to share between jobs
      - name: Upload devenv files
        uses: actions/upload-artifact@v3
        with:
          name: devenv-files-python-${{ matrix.python_version }}
          path: ./test/python-versions/
          retention-days: 1

  # New job to collect all versions and commit them
  commit-all-versions:
    name: Collect and Commit All Python Versions
    needs: update-python-versions
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main' && success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      # Select which Python version to use for main devenv.nix/devenv.lock
      # (Using the manually selected version if workflow_dispatch was used)
      - name: Set target Python version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "TARGET_PYTHON_VERSION=${{ github.event.inputs.python_version }}" >> $GITHUB_ENV
          else
            echo "TARGET_PYTHON_VERSION=312" >> $GITHUB_ENV # Default to 3.12
          fi

      # Download all the devenv files from all Python versions
      - name: Download all devenv files
        uses: actions/download-artifact@v3
        with:
          path: ./downloads/

      - name: Prepare all files for commit
        run: |
          # Create test directory if it doesn't exist
          mkdir -p ./test/python-versions
          
          # Copy all files from downloads to test directory
          find ./downloads -name "devenv-files-python-*" -type d | while read dir; do
            cp -r $dir/* ./test/python-versions/ || true
          done
          
          # Display all files collected
          ls -la ./test/python-versions/ || echo "No files found in test directory"
          
          # Copy the target Python version files to root for the main devenv setup
          if [ -f "./test/python-versions/devenv-py${TARGET_PYTHON_VERSION}.nix" ]; then
            cp ./test/python-versions/devenv-py${TARGET_PYTHON_VERSION}.nix ./devenv.nix
          else
            echo "::warning::Target Python version devenv.nix not found"
          fi
          
          if [ -f "./test/python-versions/devenv-py${TARGET_PYTHON_VERSION}.lock" ]; then
            cp ./test/python-versions/devenv-py${TARGET_PYTHON_VERSION}.lock ./devenv.lock
          else
            echo "::warning::Target Python version devenv.lock not found"
          fi
          
          # Create a summary file with test results
          echo "# Python Version Test Results" > ./test/python-versions/README.md
          echo "" >> ./test/python-versions/README.md
          echo "Main devenv is configured with Python ${TARGET_PYTHON_VERSION}" >> ./test/python-versions/README.md
          echo "" >> ./test/python-versions/README.md
          echo "## Available Configurations" >> ./test/python-versions/README.md
          
          # List all versions that were tested
          for version in 310 311 312 313; do
            if [ -f "./test/python-versions/devenv-py${version}.nix" ]; then
              echo "- Python ${version}: [devenv-py${version}.nix](devenv-py${version}.nix) | [devenv-py${version}.lock](devenv-py${version}.lock)" >> ./test/python-versions/README.md
              
              # Add test results summary if available
              if [ -d "./test/python-versions/py${version}-results" ]; then
                if [ -f "./test/python-versions/py${version}-results/python-version.txt" ]; then
                  PYTHON_VERSION=$(cat "./test/python-versions/py${version}-results/python-version.txt")
                  echo "  - Tested with: ${PYTHON_VERSION}" >> ./test/python-versions/README.md
                fi
                
                if [ -f "./test/python-versions/py${version}-results/test-exit-code.txt" ]; then
                  TEST_CODE=$(cat "./test/python-versions/py${version}-results/test-exit-code.txt")
                  if [ "$TEST_CODE" == "0" ]; then
                    echo "  - Tests: ✅ Passed" >> ./test/python-versions/README.md
                  else
                    echo "  - Tests: ❌ Failed (exit code ${TEST_CODE})" >> ./test/python-versions/README.md
                  fi
                fi
              fi
            fi
          done
          
          # Add instructions for using different Python versions
          echo "" >> ./test/python-versions/README.md
          echo "## How to Use" >> ./test/python-versions/README.md
          echo "To switch to a different Python version:" >> ./test/python-versions/README.md
          echo "1. Copy the desired version files to the project root:" >> ./test/python-versions/README.md
          echo "   bash" >> ./test/python-versions/README.md
          echo "   cp test/python-versions/devenv-py311.nix ./devenv.nix" >> ./test/python-versions/README.md
          echo "   cp test/python-versions/devenv-py311.lock ./devenv.lock" >> ./test/python-versions/README.md
          echo "   " >> ./test/python-versions/README.md
          echo "2. Run \direnv allow\ to reload the environment" >> ./test/python-versions/README.md

      - name: Commit and push all files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if there are changes to commit
          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          # Add all the files
          git add devenv.nix devenv.lock test/
          
          # Commit with information about which Python version is active
          git commit -m "Update to Python ${TARGET_PYTHON_VERSION} with all tested versions in test/python-versions"
          
          # Push changes
          git push